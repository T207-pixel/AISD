//******llrb-tree*******//
Написать программу для работы  по запросам оператора с упорядоченной таблицей, реализованной в виде LLRB дерева поиска.
Узел дерева содержит ключ, указатель на информационное поле и необходимые указатели и служебные поля.
В таблице могут храниться записи с одинаковыми ключами в одном узле дерева (или списка элементов) в виде списка информационных полей.
Предусмотреть следующие операции:
Включение нового элемента в таблицу без нарушения свойств упорядоченности; если информация с заданным ключом уже есть, но дублирование ключей не допускается, то выводится сообщение об ошибке.
Удаление  из  таблицы  элемента, заданного своим ключом, без нарушения свойств упорядоченности таблицы (если элементов несколько, то указывается номер удаляемого элемента).
Поиск информации по заданному ключу; если элементов с одинаковым ключем может быть несколько, указывается порядковый номер искомого элемента; возврат осуществлять при помощи указателя, возврат копий элементов не допускается.
Вывод всего содержимого таблицы в прямом порядке следования ключей, не превышающих заданный (если ключ не указан - вывод всей таблицы; если ключа два - можно указать оба ключа, только первый, только второй или не указать ни одного).
Поиск элемента, наиболее близкого по значению к заданному ключу/ключам, но не  совпадающему с ним (если таких элементов несколько – действовать по аналогии с операцией поиска по ключу; для Q и kd-деревьев, использовать евклюдову метрику).
Примечания:
1. Программа  должна  содержать несколько функций;  функция main() должна выполнять: вывод меню, ввод и анализ  ответа,  вызов  на исполнение требуемой функции.
2. В программе нужно предусмотреть проверку правильности ввода данных.
3. Оценить сложность реализованных алгоритмов.
4. Для целей отладки реализовать форматированный вывод таблицы в виде дерева.
5. Для целей отладки реализовать загрузку таблицы из файла в формате
   • Ключ1
   • Инофрмация1
   • Ключ2
   • …
6. Провести таймирование (или профилирование) программы.
7. *(Дополнительно) Реализовать графический вывод таблицы (дерева) при помощи внешней библиотеки или внешнего инструмента (например, graphviz).
8. **(Дополнительно) При помощи реализованной таблицы (дерева) написать программу для быстрого поиска слова в текстовом файле (если ключ - строка) или числа типа (unsigned) integer в бинарном файле (если ключ - число). Результатом поиска является таблица с расположением всех вхождений заданного слова/числа в файле (если ключи не уникальны) или расположение первого вхождения заданного слова/числа в файле (если ключи уникальны). Расположение слова/числа представляет из себя совокупность номера строки и смещения слова в этой строке (для текстовых файлов) или смещение числа относительно начала файла (для бинарных файлов).
Для выполнения данного пункта задания разрешается изменить тип хранимых в таблице данных (Info).
9. **(Дополнительно) Доступ к элементам таблицы (дерева) реализовать через дополнительный кэш-буфер, реализованный в виде хэш-таблицы. Размер кэш-буфера ограничен числом N.
